using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Titanium.Scenes.Panels;
using Titanium.Battle;
using Titanium.Utilities;

namespace Titanium.Scenes
{
    /// <summary>
    /// The Main Menu
    /// </summary>
    class MainMenuScene : Scene
    {
        ContentManager content;

        // Possible player actions
        InputAction newGame;
        InputAction loadGame;
        InputAction battle;
        InputAction rhythm;

        enum Directions { down, right, left, up }
        InputAction[] rhythmInputs = { 
            new InputAction(new Buttons[] {Buttons.A, Buttons.DPadDown }, new Keys[] { }, false),
            new InputAction(new Buttons[] {Buttons.B, Buttons.DPadRight }, new Keys[] { }, false),
            new InputAction(new Buttons[] {Buttons.X, Buttons.DPadLeft }, new Keys[] { }, false),
            new InputAction(new Buttons[] {Buttons.Y, Buttons.DPadUp }, new Keys[] { }, false)
        };

        private static int MOVE_SPEED = 15;

        private Texture2D menuBackground;
        private Texture2D menuTitle;

        private Vector2 titlePos;
        private Vector2 menuPos;

        MenuPanel mainMenu;

        bool inRhythm;
        InputAction held;
        int time;


        public delegate void MenuEventHandler(object sender, EventArgs e);

        public MainMenuScene(): base()
        {
            // Initialize the player actions
<<<<<<< HEAD
            arena = InputAction.A;
            rhythm = InputAction.START;
            battle = InputAction.X;
=======
            newGame = InputAction.A;
            loadGame = InputAction.X;
            battle = InputAction.B;
>>>>>>> develop

            // Create the actual Main Menu panel
            mainMenu = new MenuPanel("Main Menu", new List<MenuItem>()
            {
<<<<<<< HEAD
                new MenuItem("Rhtym Builder", rhythm),
                new MenuItem("Enter the arena!", arena),
                new MenuItem("Enter battle!", battle)
=======
                new MenuItem("New Game", newGame),
                new MenuItem("Load Game", loadGame),
                new MenuItem("(TEMP) Battle", battle)
>>>>>>> develop
            });

        }

        public override void draw(GameTime gameTime)
        {
            SceneManager.SpriteBatch.Begin();

            SceneManager.SpriteBatch.Draw(menuBackground, new Vector2(0, 0), Color.White);
            SceneManager.SpriteBatch.Draw(menuTitle, titlePos, Color.White);

            mainMenu.draw(SceneManager.SpriteBatch, null);
            SceneManager.SpriteBatch.End();
        }

        // 
        public override void loadScene(ContentManager content)
        {
            // Load the art
            menuBackground = content.Load<Texture2D>("Sprites/Menu-Background");
            menuTitle = content.Load<Texture2D>("Sprites/Menu-Title");

            titlePos = new Vector2(-menuTitle.Width, 0);
            menuPos = new Vector2(300, 0);

            mainMenu.load(content, SceneManager.GraphicsDevice.Viewport);

            mainMenu.center();

#if XBOX360
            if (!SaveUtils.getInstance().storageRegistered())
                SaveUtils.getInstance().RegisterStorage();
#endif

        }

        public override void unloadScene() {}

        public override void update(GameTime gameTime, InputState inputState)
        {
            PlayerIndex player;

<<<<<<< HEAD
            if (rhythm.wasPressed(inputState))
            {
                if (inRhythm)
                    printRhythmOutput();
                if (!inRhythm)
                    time = 0;
                inRhythm = !inRhythm;
            }

            if (inRhythm)
                updateRhythm(gameTime, inputState);
            else
            {
                if (arena.Evaluate(inputState, null, out player))
                    SceneManager.changeScene(SceneState.arena);
                else if (battle.Evaluate(inputState, null, out player))
                {
                    BattleScene battle = new BattleScene(
                        new List<PartyUtils.Enemy>() { PartyUtils.Enemy.Redbat, PartyUtils.Enemy.Redbat },
                        new List<PartyUtils.Enemy>() { PartyUtils.Enemy.Redbat, PartyUtils.Enemy.Redbat }
                        );
                    SceneManager.setScene(SceneState.battle, battle, true);
                }


                mainMenu.update(gameTime, inputState);
            }
        }
        public void updateRhythm(GameTime gameTime, InputState state)
        {
            this.time += gameTime.ElapsedGameTime.Milliseconds;
            if (held == null)
            {
                for (int i = 0; i < 4; i++)
                    if (rhythmInputs[i].wasPressed(state))
                    {
                        switch ((Directions)i)
                        {
                            case Directions.down:
                                Console.WriteLine("input: down");
                                break;
                            case Directions.left:
                                Console.WriteLine("LEFT WAS PRESSED :" + time);
                                break;
                            case Directions.right:
                                Console.WriteLine("RIGHT WAS PRESSED :" + time);
                                break;
                            case Directions.up:
                                Console.WriteLine("UP WAS PRESSED :" + time);
                                break;
                            default: break;
                        }
                        held = rhythmInputs[i];
                    }
            }
            else
            {
                if(!held.wasPressed(state) )
                {
                    held = null;
                    Console.WriteLine("RELEASED : " + time);
                }
            }
=======

            if (newGame.Evaluate(inputState, null, out player))
            {
                menuNewGame();
            }
            else if (loadGame.Evaluate(inputState, null, out player))
            {
                menuLoadGame();
            }
            else if (battle.Evaluate(inputState, null, out player))
            {

                menuBattle();
            }
            mainMenu.update(gameTime, inputState);

            // Move the title image
            titlePos.X += MathUtils.smoothChange(titlePos.X, 0, MOVE_SPEED);
            
            // Move the menu
            menuPos.X += MathUtils.smoothChange(menuPos.X, -380, MOVE_SPEED);

            mainMenu.Origin = new Vector2(BaseGame.SCREEN_WIDTH + menuPos.X, 340);
            mainMenu.updateMenuItemLocations();
        }

        public void menuNewGame()
        {

            ArenaScene arena = new ArenaScene();
            SceneManager.setScene(SceneState.arena, arena, true);
        }

        public void menuLoadGame()
        {
            SaveData data = SaveUtils.getInstance().loadGame();
        }

        public void menuBattle()
        {
            BattleScene battle = new BattleScene(
                    new List<PartyUtils.Enemy>() { PartyUtils.Enemy.Redbat, PartyUtils.Enemy.Redbat },
                    new List<PartyUtils.Enemy>() { PartyUtils.Enemy.Redbat, PartyUtils.Enemy.Redbat }
                    );
            SceneManager.setScene(SceneState.battle, battle, true);
>>>>>>> develop
        }

        public void printRhythmOutput()
        {

        }

    }
}
